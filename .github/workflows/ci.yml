name: CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11]
        exclude:
          # Reduce matrix size - test only critical combinations on macOS/Linux
          - os: macos-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.9
          - os: ubuntu-latest
            python-version: 3.8
          - os: ubuntu-latest
            python-version: 3.9

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-qt

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test import capabilities
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "from PyQt6.QtWidgets import QApplication; print('PyQt6 import successful')"
        python -c "import pandas as pd; print('Pandas version:', pd.__version__)"
        python -c "import numpy as np; print('NumPy version:', np.__version__)"
        python -c "import matplotlib; print('Matplotlib version:', matplotlib.__version__)"

    - name: Test basic application startup (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        export QT_QPA_PLATFORM=offscreen
        if [ "$RUNNER_OS" = "Linux" ]; then
          xvfb-run -a python -c "import sys; from PyQt6.QtWidgets import QApplication; from monstim_gui.gui_main import MonstimGUI; app = QApplication(sys.argv); try: window = MonstimGUI(); print('GUI initialization successful'); except Exception as e: print(f'GUI initialization failed: {e}'); sys.exit(1)"
        else
          python -c "import sys; from PyQt6.QtWidgets import QApplication; from monstim_gui.gui_main import MonstimGUI; app = QApplication(sys.argv); try: window = MonstimGUI(); print('GUI initialization successful'); except Exception as e: print(f'GUI initialization failed: {e}'); sys.exit(1)"
        fi

    - name: Test basic application startup (Windows)
      if: runner.os == 'Windows'
      run: |
        python -c "import sys; from PyQt6.QtWidgets import QApplication; from monstim_gui.gui_main import MonstimGUI; app = QApplication(sys.argv); try: window = MonstimGUI(); print('GUI initialization successful'); except Exception as e: print(f'GUI initialization failed: {e}'); sys.exit(1)"

    - name: Test core signal processing modules
      run: |
        python -c "try: from monstim_signals.core.experiment import Experiment; from monstim_signals.core.dataset import Dataset; from monstim_signals.core.session import Session; from monstim_signals.io.csv_manager import CSVManager; print('Core modules import successful'); except Exception as e: print(f'Core modules import failed: {e}'); sys.exit(1)"

    - name: Run basic functionality tests (if test files exist)
      run: |
        if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
          if [ "$RUNNER_OS" != "Windows" ]; then
            export QT_QPA_PLATFORM=offscreen
            xvfb-run -a python -m pytest tests/ -v
          else
            python -m pytest tests/ -v
          fi
        else
          echo "No tests directory found, skipping pytest"
        fi
      shell: bash

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Advanced linting with flake8
      run: |
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check

    - name: Run security linter
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json || true
        bandit -r . -x tests/ || true

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
